<shaders>

    <shader name="PitchBlack">
        <parameters>
            <param name="Enabled" type="float"/>
        </parameters>
        <vertex><![CDATA[
            attribute vec3 Position;
            attribute vec4 Color;
            attribute vec2 TexCoord;
            attribute vec4 RenderData;
            attribute float Scale;
            attribute float Enabled;
            varying vec4 Color0;
            varying vec2 TexCoord0;
            varying vec4 RenderDataOut;
            varying float ScaleOut;
            varying float EnabledOut;
            uniform mat4 Transform;
            void main(void)
            {
                RenderDataOut = RenderData;
                ScaleOut = Scale;           // Passing data to fragment shader
                EnabledOut = Enabled;             // Passing data to fragment shader
                Color0 = Color;
                TexCoord0 = TexCoord;
                gl_Position = Transform * vec4(Position.xyz, 1.0);
            }
        ]]></vertex>

        <fragment><![CDATA[
            varying lowp vec4 Color0;
            varying mediump vec2 TexCoord0;
            varying lowp vec4 RenderDataOut;
            varying lowp float ScaleOut;
            varying lowp float EnabledOut;
            uniform sampler2D Texture0;
            void main(void)
            {
                vec4 Color = Color0 * texture2D(Texture0, TexCoord0);
                Color.r -= EnabledOut * Color.r;
                Color.g -= EnabledOut * Color.g;
                Color.b -= EnabledOut * Color.b;
                gl_FragColor = Color;
            }
        ]]></fragment>
    </shader>

    <shader name="Timestuck">
        <parameters>
            <param name="Enabled" type="float"/>
        </parameters>
        <vertex><![CDATA[
            attribute vec3 Position;
            attribute vec4 Color;
            attribute vec2 TexCoord;
            attribute vec4 RenderData;
            attribute float Scale;
            attribute float Enabled;
            varying vec4 Color0;
            varying vec2 TexCoord0;
            varying vec4 RenderDataOut;
            varying float ScaleOut;
            varying float EnabledOut;
            uniform mat4 Transform;
            void main(void)
            {
                RenderDataOut = RenderData;
                ScaleOut = Scale;           // Passing data to fragment shader
                EnabledOut = Enabled;             // Passing data to fragment shader
                Color0 = Color;
                TexCoord0 = TexCoord;
                gl_Position = Transform * vec4(Position.xyz, 1.0);
            }
        ]]></vertex>

        <fragment><![CDATA[
            varying lowp vec4 Color0;
            varying mediump vec2 TexCoord0;
            varying lowp vec4 RenderDataOut;
            varying lowp float ScaleOut;
            varying lowp float EnabledOut;
            uniform sampler2D Texture0;
            void main(void)
            {
                vec4 Color = Color0 * texture2D(Texture0, TexCoord0);
                Color.r += EnabledOut * 0.2;
                gl_FragColor = Color;
            }
        ]]></fragment>
    </shader>

    <shader name="DarknessOther">
        <parameters>
            <param name="EnabledStatic" type="float"/>
            <param name="EnabledZoom" type="float"/>
            <param name="Position0" type="vec3"/>
            <param name="Position1" type="vec3"/>
            <param name="Time" type="float"/>
            <param name="Distance" type="float"/>
            <param name="Red" type="float"/>
            <param name="WarpCheck" type="vec2"/>
        </parameters>

        <vertex><![CDATA[
                attribute vec3 Position; 
                attribute vec4 Color; 
                attribute vec2 TexCoord; 
                attribute vec4 RenderData; 
                attribute float Scale;
                attribute float EnabledStatic;
                attribute float EnabledZoom;
                attribute vec3 Position0;
                attribute vec3 Position1;
                attribute float Time;
                attribute float Distance;
                attribute float Red;
                attribute vec2 WarpCheck;
                
                varying vec4 Color0; 
                varying vec2 TexCoord0; 
                varying vec4 RenderDataOut; 
                varying float ScaleOut;
                varying float EnabledStaticOut;
                varying float EnabledZoomOut;
                varying vec3 Position0Out;
                varying vec3 Position1Out;
                varying float TimeOut;
                varying float DistanceOut;
                varying float RedOut;
                uniform mat4 Transform; 

                void main(void) 
                {
                    RenderDataOut = RenderData;
                    ScaleOut = Scale;           // Passing data to fragment shader
                    EnabledStaticOut = EnabledStatic;             // Passing data to fragment shader
                    EnabledZoomOut = EnabledZoom;             // Passing data to fragment shader
                    Position0Out = Position0;             // Passing data to fragment shader
                    Position1Out = Position1;             // Passing data to fragment shader
                    TimeOut = Time;             // Passing data to fragment shader
                    DistanceOut = Distance;             // Passing data to fragment shader
                    RedOut = Red;             // Passing data to fragment shader

                    Color0 = Color;
                    if (EnabledZoom){
                        
                        vec2 TargetPos = (Position0.xy / RenderData.zw) * Scale;
                        
                        vec2 WarpChecker = (WarpCheck.xy / RenderData.zw) * Scale;
                        float xDistance = distance(vec2(WarpChecker.x, TargetPos.y), TargetPos.xy);
                        float yDistance = distance(vec2(TargetPos.x, WarpChecker.y), TargetPos.xy);
                        float YWarping = xDistance / yDistance;
                        

                        TexCoord0.xy = TexCoord.xy*(.5) + TargetPos.xy*0.5;
                    }
                    else{
                        TexCoord0 = TexCoord;
                    }
                    gl_Position = Transform * vec4(Position.xyz, 1.0);
                }

        ]]></vertex>

        <fragment><![CDATA[
            varying lowp vec4 Color0; 
            varying mediump vec2 TexCoord0; 
            varying lowp vec4 RenderDataOut;
            varying lowp float ScaleOut; 
            varying lowp float EnabledStaticOut; 
            varying lowp float EnabledZoomOut; 
            varying vec3 Position0Out;
            varying vec3 Position1Out;
            varying lowp float TimeOut;
            varying lowp float DistanceOut; 
            varying lowp float RedOut; 
            uniform sampler2D Texture0; 
            void main(void)
            {
                vec4 Color = Color0 * texture2D(Texture0, TexCoord0);
                
                if (EnabledStaticOut){
                    float aspect = RenderDataOut.z/RenderDataOut.w;
                    float time = TimeOut/1000.0;
                    float timeFlor = floor(time) + (time * 0.5);

                    vec2 coord = (TexCoord0.xy) * vec2(aspect,1.0);
                    coord = floor(coord * 300.0/aspect) * 4.0;

                    float staticCol = (sin(fract(sin(dot((coord / timeFlor), vec2(12.9898, 78.233))) * 43758.5453)) * 0.25) + 0.5;
                    
                    staticCol = staticCol*staticCol*staticCol * 25. / DistanceOut;

                    vec2 pos = (Position0Out.xy / RenderDataOut.zw) * ScaleOut ;
                    float dist   = length((TexCoord0 - pos) * vec2(aspect,1.0)); //Distance from pixel to pos
                    dist *= 2.;

                    Color += vec4(RedOut*0.5*Color.r + RedOut*0.5, 0,0,0);

                    Color.r += staticCol*dist;
                    Color.g += staticCol*dist;
                    Color.b += staticCol*dist;
                }
                gl_FragColor = Color;
            }
        ]]></fragment>

    </shader>

    <shader name="Darkness">
        <parameters>
			<param name="ActiveIn" type="float"/>
			<param name="TargetPosition0" type="vec4"/>
			<param name="TargetPosition1" type="vec4"/>
			<param name="TargetPosition2" type="vec4"/>
			<param name="TargetPosition3" type="vec4"/>
			<param name="TargetPosition4" type="vec4"/>
			<param name="TargetPosition5" type="vec4"/>
			<param name="TargetPosition6" type="vec4"/>
			<param name="TargetPosition7" type="vec4"/>
            <param name="WarpCheck" type="vec2"/>
		</parameters>
        <vertex><![CDATA[
            attribute vec3 Position;
            attribute vec4 Color;
            attribute vec2 TexCoord;
            attribute vec4 RenderData;
            attribute float Scale;

            varying vec4 Color0;
            varying vec2 TexCoord0;
            varying vec4 RenderDataOut;
            varying float ScaleOut;

            attribute float ActiveIn;
            varying float Active;

            attribute vec4 TargetPosition0;
            attribute vec4 TargetPosition1;
            attribute vec4 TargetPosition2;
            attribute vec4 TargetPosition3;
            attribute vec4 TargetPosition4;
            attribute vec4 TargetPosition5;
            attribute vec4 TargetPosition6;
            attribute vec4 TargetPosition7;

            varying vec3 TargetPositionOut0;
            varying vec3 TargetPositionOut1;
            varying vec3 TargetPositionOut2;
            varying vec3 TargetPositionOut3;
            varying vec3 TargetPositionOut4;
            varying vec3 TargetPositionOut5;
            varying vec3 TargetPositionOut6;
            varying vec3 TargetPositionOut7;

            attribute vec2 WarpCheck;
            varying float YWarping;

            uniform mat4 Transform;
            void main(void) {
                RenderDataOut = RenderData;
                Color0 = Color;
                TexCoord0 = TexCoord;

                gl_Position = Transform * vec4(Position.xyz, 1.0);

                Active = ActiveIn;

                if (Active) {
                    vec4 TargetPos;

                    TargetPos.xy = (TargetPosition0.xy / RenderData.zw) * Scale;
                    TargetPos.zw =  (TargetPosition0.zw / RenderData.zw) * Scale;
                    TargetPositionOut0 = vec3(TargetPos.xy, distance(TargetPos.xy, TargetPos.zw));
                    
                    vec2 WarpChecker = (WarpCheck.xy / RenderData.zw) * Scale;
                    float xDistance = distance(vec2(WarpChecker.x, TargetPos.y), TargetPos.xy);
                    float yDistance = distance(vec2(TargetPos.x, WarpChecker.y), TargetPos.xy);
                    YWarping = xDistance / yDistance;
                    
                    //---------------------------

                    TargetPos.xy = (TargetPosition1.xy / RenderData.zw) * Scale;
                    TargetPos.zw = (TargetPosition1.zw / RenderData.zw) * Scale;
                    TargetPositionOut1 = vec3(TargetPos.xy, distance(TargetPos.xy, TargetPos.zw));
                    
                    TargetPos.xy = (TargetPosition2.xy / RenderData.zw) * Scale;
                    TargetPos.zw = (TargetPosition2.zw / RenderData.zw) * Scale;
                    TargetPositionOut2 = vec3(TargetPos.xy, distance(TargetPos.xy, TargetPos.zw));
                    
                    TargetPos.xy = (TargetPosition3.xy / RenderData.zw) * Scale;
                    TargetPos.zw = (TargetPosition3.zw / RenderData.zw) * Scale;
                    TargetPositionOut3 = vec3(TargetPos.xy, distance(TargetPos.xy, TargetPos.zw));
                    
                    TargetPos.xy = (TargetPosition4.xy / RenderData.zw) * Scale;
                    TargetPos.zw = (TargetPosition4.zw / RenderData.zw) * Scale;
                    TargetPositionOut4 = vec3(TargetPos.xy, distance(TargetPos.xy, TargetPos.zw));
                    
                    TargetPos.xy = (TargetPosition5.xy / RenderData.zw) * Scale;
                    TargetPos.zw = (TargetPosition5.zw / RenderData.zw) * Scale;
                    TargetPositionOut5 = vec3(TargetPos.xy, distance(TargetPos.xy, TargetPos.zw));
                    
                    TargetPos.xy = (TargetPosition6.xy / RenderData.zw) * Scale;
                    TargetPos.zw = (TargetPosition6.zw / RenderData.zw) * Scale;
                    TargetPositionOut6 = vec3(TargetPos.xy, distance(TargetPos.xy, TargetPos.zw));
                    
                    TargetPos.xy = (TargetPosition7.xy / RenderData.zw) * Scale;
                    TargetPos.zw = (TargetPosition7.zw / RenderData.zw) * Scale;
                    TargetPositionOut7 = vec3(TargetPos.xy, distance(TargetPos.xy, TargetPos.zw));
                }
            }
            ]]>
            </vertex>

            <fragment><![CDATA[
            varying vec4 Color0;
            varying vec2 TexCoord0;
            varying vec4 RenderDataOut;
            varying float ScaleOut;
            uniform sampler2D Texture0;

            varying float Active;
            varying vec4 TargetPositionOut0;
            varying vec4 TargetPositionOut1;
            varying vec4 TargetPositionOut2;
            varying vec4 TargetPositionOut3;
            varying vec4 TargetPositionOut4;
            varying vec4 TargetPositionOut5;
            varying vec4 TargetPositionOut6;
            varying vec4 TargetPositionOut7;
            varying vec4 Distance;
            varying float YWarping;

            float warpedDistance(vec2 a, vec2 b) {
                vec2 diff = a - b;
                float distanceSquared = (diff.x * diff.x) + (diff.y * diff.y * YWarping * YWarping);
                return sqrt(distanceSquared);
            }

            void main(void) {
                vec4 Color = Color0 * texture2D(Texture0, TexCoord0);
                if (Active) {
                    vec4 newColor = vec4(vec3(0.),1.);

                    float dist = warpedDistance(TexCoord0, TargetPositionOut0.xy);
                    float intensity   = dist / TargetPositionOut0.z / 1.8;
                    newColor = max(newColor, Color*0.8 - intensity*intensity);

                    dist = warpedDistance(TexCoord0, TargetPositionOut1.xy);
                    intensity   = dist / TargetPositionOut1.z / 1.8;
                    newColor = max(newColor, Color*0.8 - intensity*intensity);

                    dist = warpedDistance(TexCoord0, TargetPositionOut2.xy);
                    intensity   = dist / TargetPositionOut2.z / 1.8;
                    newColor = max(newColor, Color*0.8 - intensity*intensity);

                    dist = warpedDistance(TexCoord0, TargetPositionOut3.xy);
                    intensity   = dist / TargetPositionOut3.z / 1.8;
                    newColor = max(newColor, Color*0.8 - intensity*intensity);

                    dist = warpedDistance(TexCoord0, TargetPositionOut4.xy);
                    intensity   = dist / TargetPositionOut4.z / 1.8;
                    newColor = max(newColor, Color*0.8 - intensity*intensity);

                    dist = warpedDistance(TexCoord0, TargetPositionOut5.xy);
                    intensity   = dist / TargetPositionOut5.z / 1.8;
                    newColor = max(newColor, Color*0.8 - intensity*intensity);

                    dist = warpedDistance(TexCoord0, TargetPositionOut6.xy);
                    intensity   = dist / TargetPositionOut6.z / 1.8;
                    newColor = max(newColor, Color*0.8 - intensity*intensity);

                    dist = warpedDistance(TexCoord0, TargetPositionOut7.xy);
                    intensity   = dist / TargetPositionOut7.z / 1.8;
                    newColor = max(newColor, Color*0.8 - intensity*intensity);

                    Color = newColor;
                }
                gl_FragColor = Color;
            }
      ]]></fragment>
    </shader>

    <shader name="VenusHeat">
        <parameters>
            <param name="PlayerPos" type="vec2"/>
            <param name="CenterPos" type="vec2"/>
            <param name="Time" type="float"/>
            <param name="VenusTime" type="float"/>
        </parameters>

        <vertex><![CDATA[
                attribute vec3 Position; 
                attribute vec4 Color; 
                attribute vec2 TexCoord; 
                attribute vec4 RenderData; 
                attribute float Scale;
                attribute vec2 PlayerPos;
                attribute vec2 CenterPos;
                attribute float Time;
                attribute float VenusTime;
                
                varying vec4 Color0; 
                varying vec2 TexCoord0; 
                varying vec4 RenderDataOut; 
                varying float ScaleOut;
                varying vec2 PlayerPosOut;
                varying vec2 CenterPosOut;
                varying float TimeOut;
                varying float VenusTimeOut;
                uniform mat4 Transform; 

                void main(void) 
                {
                    RenderDataOut = RenderData;
                    ScaleOut = Scale;           // Passing data to fragment shader
                    PlayerPosOut = PlayerPos;
                    CenterPosOut = CenterPos;
                    TimeOut = Time;             // Passing data to fragment shader
                    VenusTimeOut = VenusTime;             // Passing data to fragment shader
                    Color0 = Color;


                    vec2 pos = (PlayerPos / RenderData.zw) * Scale;


                    vec2 diff = TexCoord - pos;
                    float dist = diff.x*diff.x + diff.y*diff.y;

                    
                    vec2 coord = TexCoord;

                    float margin = 0.5;
                    if ( dist < margin ) {
                        float _Strength = 0.005 * (VenusTimeOut / 60.0);
                        float _Frequency = 100.0; 
                        float _Speed = 0.25;

                        float sineNoise = sin(_Frequency * TexCoord.y - Time * _Speed);
                        float offset = sineNoise * _Strength; 

                        //float t;
                        //float edge0 = 1.0 - TexCoord.y;
                        //float edge1 = 0.45;
                        //float x = 0.6;
                        //t = clamp((x - edge0) / (edge1 - edge0), 0.0, 1.0);
                        //offset *= t * t * (3.0 - 2.0 * t);
                        
                        coord.x += offset;
                    }

                    TexCoord0 = coord;
                    gl_Position = Transform * vec4(Position.xyz, 1.0);
                }

        ]]></vertex>

        <fragment><![CDATA[
            varying lowp vec4 Color0; 
            varying mediump vec2 TexCoord0; 
            varying lowp vec4 RenderDataOut;
            varying lowp float ScaleOut; 
            varying mediump vec2 PlayerPosOut;
            varying mediump vec2 CenterPosOut;
            varying lowp float TimeOut; 
            varying lowp float VenusTimeOut; 
            uniform sampler2D Texture0; 
            void main(void)
            {
                vec4 Color = Color0 * texture2D(Texture0, TexCoord0);

                vec2 pos = (PlayerPosOut / RenderDataOut.zw) * ScaleOut;

                float dist = distance(TexCoord0, pos );
                if (dist < 10.0) {
                    Color.r += (0.2 / dist/2.0) * (VenusTimeOut / 60.0);
                    Color.g += (0.1 / dist/5.0) * (VenusTimeOut / 60.0);
                }
                gl_FragColor = Color;
            }
        ]]></fragment>

    </shader>

    <shader name="BlackHole">
        <parameters>
            <param name="Enabled" type="float"/>
            <param name="BlackPosition" type="vec3"/>
            <param name="Time" type="float"/>
        </parameters>

        <vertex><![CDATA[
                attribute vec3 Position; 
                attribute vec4 Color; 
                attribute vec2 TexCoord; 
                attribute vec4 RenderData; 
                attribute float Scale;
                attribute float Enabled;
                attribute vec3 BlackPosition;
                attribute float Time;
                
                varying vec4 Color0; 
                varying vec2 TexCoord0; 
                varying vec4 RenderDataOut; 
                varying float ScaleOut;
                varying float EnabledOut;
                varying vec3 BlackPositionOut;
                varying float TimeOut;
                uniform mat4 Transform; 

                void main(void) 
                {
                    RenderDataOut = RenderData;
                    ScaleOut = Scale;           // Passing data to fragment shader
                    EnabledOut = Enabled;             // Passing data to fragment shader
                    BlackPositionOut = BlackPosition;             // Passing data to fragment shader
                    TimeOut = Time;             // Passing data to fragment shader
                    Color0 = Color;
                    TexCoord0 = TexCoord;
                    gl_Position = Transform * vec4(Position.xyz, 1.0);
                }

        ]]></vertex>

        <fragment><![CDATA[
            varying lowp vec4 Color0; 
            varying mediump vec2 TexCoord0; 
            varying lowp vec4 RenderDataOut;
            varying lowp float ScaleOut; 
            varying lowp float EnabledOut; 
            varying mediump vec3 BlackPositionOut;
            varying lowp float TimeOut; 
            uniform sampler2D Texture0; 
            void main(void)
            {
                float aspect = RenderDataOut.z/RenderDataOut.w;
                vec4 Color = Color0 * texture2D(Texture0, TexCoord0);

                vec2 pos = (BlackPositionOut.xy / RenderDataOut.zw) * ScaleOut ;
                vec2 rad = (BlackPositionOut.zy / RenderDataOut.zw) * ScaleOut * 1.02;

                float radius = length((rad - pos)       * vec2(aspect,1.0)); //Actual radius
                float dist   = length((TexCoord0 - pos) * vec2(aspect,1.0)); //Distance from pixel to center

                if (dist < radius * TimeOut) {
                    Color.r -= EnabledOut * Color.r;
                    Color.g -= EnabledOut * Color.g;
                    Color.b -= EnabledOut * Color.b;
                }
                gl_FragColor = Color;
            }
        ]]></fragment>

    </shader>

    <shader name="Mars">
            <parameters>
                <param name="Enabled" type="float"/>
                <param name="Charge" type="float"/>
                <param name="Time" type="float"/>
                <param name="NotBattery" type="float"/>
            </parameters>

            <vertex><![CDATA[
                    attribute vec3 Position; 
                    attribute vec4 Color; 
                    attribute vec2 TexCoord; 
                    attribute vec4 RenderData; 
                    attribute float Scale;
                    attribute float Enabled;
                    attribute float Charge;
                    attribute float NotBattery;
                    attribute float Time;
                    
                    varying vec4 Color0; 
                    varying vec2 TexCoord0; 
                    varying vec4 RenderDataOut; 
                    varying float ScaleOut;
                    varying float EnabledOut;
                    varying float ChargeOut;
                    varying float NotBatteryOut;
                    varying float TimeOut;
                    uniform mat4 Transform; 

                    void main(void) 
                    {
                        RenderDataOut = RenderData;
                        ScaleOut = Scale;           // Passing data to fragment shader
                        EnabledOut = Enabled;             // Passing data to fragment shader
                        ChargeOut = Charge;             // Passing data to fragment shader
                        NotBatteryOut = NotBattery;             // Passing data to fragment shader
                        TimeOut = Time;             // Passing data to fragment shader
                        Color0 = Color;
                        TexCoord0 = TexCoord;
                        gl_Position = Transform * vec4(Position.xyz, 1.0);
                    }

            ]]></vertex>

            <fragment><![CDATA[
                varying lowp vec4 Color0; 
                varying mediump vec2 TexCoord0; 
                varying lowp vec4 RenderDataOut;
                varying lowp float ScaleOut; 
                varying lowp float EnabledOut; 
                varying lowp float ChargeOut; 
                varying lowp float NotBatteryOut; 
                varying lowp float TimeOut; 
                uniform sampler2D Texture0; 
                void main(void)
                {

                    float aspect = RenderDataOut.z/RenderDataOut.w;

                    vec2 center = vec2(RenderDataOut.x / 2.0, RenderDataOut.y / 2.0);
                    vec2 path = vec2(center.x - gl_FragCoord.x,center.y - gl_FragCoord.y) / 2000.0;
                    vec2 dist = vec2(abs(path.x), abs(path.y));
                    
                    vec4 Color = Color0 * texture2D(Texture0, TexCoord0);

                    if (EnabledOut > 0.0) {
                        float time = TimeOut/2.0;
                        vec4 fragColor = vec4(0.0);

                        float dispersion = .01;
                        float distortion = .04;
                        float bendscale = 0.25;

                        vec2 uv = (path.xy) * vec2(aspect, 1.0) / aspect * 2.0;

                        vec2 disp = uv;
                        disp *= sqrt(length(disp));
                        uv += disp * bendscale;

                        vec2 uvr = uv * (1.0 - dispersion) + vec2(dispersion)/2.0;
                        vec2 uvg = uv * 1.0;
                        vec2 uvb = uv * (1.0 + dispersion) - vec2(dispersion)/2.0;

                        float r = 0.25;
                        float g = 0.0;
                        float b = 0.0;
                        
                        if (uv.x > -1.0 && uv.x < 1.0 && uv.y > -1.0 && uv.y < 1.0) {
                            float stripes = sin(uv.y * 600.0 * aspect + time);
                            vec3 col = vec3(r, g, b);
                            col = mix(col, vec3(.8), stripes / 20.0);
                            fragColor = vec4(col, 1.0);
                        } else {
                            Color = vec4(0.0, 0.0, 0.0, 1.0);	
                        }


                        Color.r += fragColor.r;
                        Color.g += fragColor.g;
                        Color.b += fragColor.b;

                        float p = 8.0;
                        if (pow(dist.x / 1.85 , p) + pow(dist.y, p) > pow(0.06 * ScaleOut, p))
                        {
                            Color.r = dist.x/2.0;
                            Color.g = 0.0;
                            Color.b = 0.0;
                        }

                        if (NotBatteryOut == 0){
                            if (0.1013 < path.x && path.x < 0.1877 &&
                            0.09 > -path.y && -path.y > 0.080){
                                Color.r = dist.x/2.0;
                                Color.g = 0.0;
                                Color.b = 0.0;

                                // 0.102 == 100%
                                // 0.19 == 0%
                                float charge = -0.088 * ChargeOut + 0.19;
                                if (charge < path.x && path.x < 0.19 &&
                            0.088 > -path.y && -path.y > 0.082){
                                    Color.r = 1.0 * (1.0+sin(path.x*1033.5));
                                }
                            }
                        }
                    }

                    gl_FragColor = Color;
                }
            ]]></fragment>
    </shader>

    <shader name="Underwater">
        <parameters>
            <param name="Enabled" type="float"/>
            <param name="Time" type="float"/>
        </parameters>
        <vertex><![CDATA[
            attribute vec3 Position;
            attribute vec4 Color;
            attribute vec2 TexCoord;
            attribute vec4 RenderData;
            attribute float Scale;
            attribute float Enabled;
            attribute float Time;
            varying vec4 Color0;
            varying vec2 TexCoord0;
            varying vec4 RenderDataOut;
            varying float ScaleOut;
            varying float EnabledOut;
            varying float TimeOut;
            uniform mat4 Transform;
            void main(void)
            {
                RenderDataOut = RenderData;
                ScaleOut = Scale;           // Passing data to fragment shader
                EnabledOut = Enabled;             // Passing data to fragment shader
                TimeOut = Time;             // Passing data to fragment shader
                Color0 = Color;


                vec2 coord = TexCoord;

                float _Strength = 0.00001225 * (Time / 600.0);
                float _Frequency = 1000.0; 
                float _Speed = 0.025;

                float sineNoise = sin(_Frequency * TexCoord.y*10.0 - Time * _Speed);
                float offset = sineNoise * _Strength; 
                coord.x += offset;


                _Strength = 0.00000512 * (Time / 600.0);
                _Frequency = 3000.0; 
                _Speed = 0.005;

                float cosNoise = sin(_Frequency * TexCoord.y*10.0 - Time * _Speed);
                offset = cosNoise * _Strength;
                coord.y += offset;


                TexCoord0 = coord;
                gl_Position = Transform * vec4(Position.xyz, 1.0);
            }
        ]]></vertex>

        <fragment><![CDATA[
            varying lowp vec4 Color0;
            varying mediump vec2 TexCoord0;
            varying lowp vec4 RenderDataOut;
            varying lowp float ScaleOut;
            varying lowp float EnabledOut;
            varying lowp float TimeOut;
            uniform sampler2D Texture0;

            //https://glslsandbox.com/e#106046.0

            mat2 rotate2D(float r) {
                return mat2(cos(r), sin(r), -sin(r), cos(r));
            }

            // based on the follow tweet:
            // https://twitter.com/zozuar/status/1621229990267310081
            void main(void)
            {
                vec4 Color = Color0 * texture2D(Texture0, TexCoord0);
                if (EnabledOut) {

                    float aspect = RenderDataOut.z/RenderDataOut.w;

                    
                    vec2 center = vec2(RenderDataOut.x / 2.0, RenderDataOut.y / 2.0);
                    vec2 path = vec2(center.x - gl_FragCoord.x,center.y - gl_FragCoord.y) / 2000.0;
                    
                    // Normalized pixel coordinates (from 0 to 1)
                    vec2 uv = (vec2(path.x*1.0 , path.y*1.5)) * vec2(1.0,1.0);
                    //vec2 uv = (path.xy) * vec2(aspect, 1.0) / aspect * 2.0;
                    
                    vec3 col = vec3(0);
                    float t = TimeOut/100.0;

                    vec2 n = vec2(0);
                    vec2 q = vec2(0);
                    vec2 p = uv*2.5;
                    float d = dot(p,p);
                    float S = 20.;
                    float a = -0.005;
                    mat2 m = rotate2D(0.9);

                    for (float j = 0.; j < 8.; j++) {
                        p *= m;
                        n *= m;
                        q = p * S + t * 2.5 + 3.*j - 1.25*n; // wtf???
                        a += 2.0*dot(cos(q)/S, vec2(.15));
                        n -= sin(q);
                        S *= 1.5;
                    }

                    col = vec3(1.5, 3., 4.5) * (a + .182) + 9.*a + a + d;

                    Color.r += col.x * 0.33;
                    Color.g += col.y * 0.33;
                    Color.b += col.z * 0.33;
    
                }
                gl_FragColor = Color;
            }
        ]]></fragment>
    </shader>

</shaders>